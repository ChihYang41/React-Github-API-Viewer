{"version":3,"sources":["logo.svg","RepoCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RepoCard","userData","map","data","key","id","title","name","style","width","marginBottom","description","href","html_url","Menu","SubMenu","Header","Layout","Content","Search","Sider","Input","App","handleGetData","username","state","searchText","fetch","page","then","res","json","setState","handleScroll","lastCard","document","querySelector","lastCardOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","debounce","this","addEventListener","className","placeholder","enterButton","size","onSearch","value","padding","background","margin","minHeight","type","justify","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAAAA,EAAOC,QAAU,IAA0B,kC,0OCG5B,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACjC,OACE,oCAEEA,GAAYA,EAASC,KAAI,SAAAC,GACvB,OACE,kBAAC,IAAD,CAAMC,IAAKD,EAAKE,GAAIC,MAAOH,EAAKI,KAAMC,MAAO,CAAEC,MAAO,IAAMC,aAAc,KACxE,2BAAIP,EAAKQ,aACT,uBAAGC,KAAMT,EAAKU,UAAd,0BCHQC,IAAZC,Q,IACAC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,QACRC,GAD2BF,IAAVG,MACNC,IAAXF,QAkGOG,E,YA/Fb,aAAe,IAAD,8BACZ,+CAmBFC,cAAgB,SAAAC,GAAa,IAAD,EACO,EAAKC,MAAlBxB,GADM,EAClByB,WADkB,EACNzB,UAEpB0B,MAAM,gCAAD,OAC6BH,EAD7B,uBACoD,EAAKI,KADzD,gBAGFC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAA1B,GAAI,OACR,EAAK6B,SAAS,CACZ/B,SAAS,GAAD,mBAAMA,GAAN,YAAmBE,UA/BrB,EAoCd8B,aAAe,WAAO,IAAD,EACc,EAAKR,MAA9BC,EADW,EACXA,WAEJQ,GAHe,EACCjC,SAELkC,SAASC,cAAc,yBACtC,GAAKF,EAAL,CACA,IAAIG,EAAiBH,EAASI,UAAYJ,EAASK,aAClCC,OAAOC,YAAcD,OAAOE,YAE5BL,IACf,EAAKT,OACL,EAAKL,cAAcG,MA5CrB,EAAKD,MAAQ,CACXC,WAAY,GACZzB,SAAU,IAGZ,EAAKsB,cAAgBoB,IAAS,EAAKpB,cAAe,KAClD,EAAKU,aAAeU,IAAS,EAAKV,aAAc,KAChD,EAAKL,KAAO,EATA,E,iFAYO,IAAD,OACVF,EAAekB,KAAKnB,MAApBC,WAERc,OAAOK,iBAAiB,UAAU,WAChC,EAAKZ,aAAaP,Q,+BAkCZ,IAAD,SAC0BkB,KAAKnB,MAAlBxB,GADb,EACCyB,WADD,EACazB,UAEpB,OACE,yBAAK6C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC9B,EAAD,CAAQ8B,UAAU,UAChB,kBAAC3B,EAAD,CACE4B,YAAY,yCACZC,YAAY,SACZC,KAAK,QACLC,SAAU,SAAAC,GACR,EAAK5B,cAAc4B,GACnB,EAAKnB,SAAS,CACZN,WAAYyB,EACZlD,SAAS,KAEX,EAAK2B,KAAO,GAEdkB,UAAU,kBAGd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQtC,MAAO,CAAE4C,QAAS,gBACxB,kBAAClC,EAAD,CACEV,MAAO,CACL6C,WAAY,OACZD,QAAS,GACTE,OAAQ,EACRC,UAAW,MAGb,2CACA,kBAAC,IAAD,CAAKC,KAAK,OAAOC,QAAQ,UACvB,kBAACzD,EAAD,CAAUC,SAAUA,c,GArFpByD,aCAEC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.c37dc190.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Card } from \"antd\";\n\nexport default function RepoCard({ userData }) {\n  return (\n    <>\n    {\n      userData && userData.map(data => {\n        return (\n          <Card key={data.id} title={data.name} style={{ width: 700,  marginBottom: 30 }}>\n            <p>{data.description}</p>\n            <a href={data.html_url}>Repo 連結</a>\n          </Card>\n        )\n      }) \n    }\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Layout, Menu, Breadcrumb, Icon, Row, Input } from \"antd\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport debounce from 'lodash/debounce'\n\nimport RepoCard from \"./RepoCard\";\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\nconst { Search } = Input;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchText: \"\",\n      userData: []\n    };\n\n    this.handleGetData = debounce(this.handleGetData, 100)\n    this.handleScroll = debounce(this.handleScroll, 100)\n    this.page = 1;\n  }\n\n  componentDidMount() {\n    const { searchText } = this.state;\n\n    window.addEventListener(\"scroll\", () => {\n      this.handleScroll(searchText);\n    });\n  }\n\n  handleGetData = username => {\n    const { searchText, userData } = this.state;\n\n    fetch(\n      `https://api.github.com/users/${username}/repos?page=${this.page}&per_page=5`\n    )\n      .then(res => {\n        return res.json()\n      })\n      .then(data =>\n        this.setState({\n          userData: [...userData, ...data]\n        })\n      );\n  };\n\n  handleScroll = () => {\n    const { searchText, userData } = this.state;\n\n    let lastCard = document.querySelector(\".ant-card:last-child\");\n    if (!lastCard) return;\n    let lastCardOffset = lastCard.offsetTop + lastCard.clientHeight;\n    let pageOffset = window.pageYOffset + window.innerHeight;\n\n    if (pageOffset > lastCardOffset) {\n      this.page++\n      this.handleGetData(searchText);\n    }\n  };\n\n  render() {\n    const { searchText, userData } = this.state;\n    \n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header className=\"header\">\n            <Search\n              placeholder=\"請輸入 Github 帳號\"\n              enterButton=\"Search\"\n              size=\"large\"\n              onSearch={value => {\n                this.handleGetData(value);\n                this.setState({\n                  searchText: value,\n                  userData:[]\n                });\n                this.page = 1\n              }}\n              className=\"search-input\"\n            />\n          </Header>\n          <Layout>\n            <Layout style={{ padding: \"0 24px 24px\" }}>\n              <Content\n                style={{\n                  background: \"#fff\",\n                  padding: 24,\n                  margin: 0,\n                  minHeight: 960\n                }}\n              >\n                <h2>User's Repo</h2>\n                <Row type=\"flex\" justify=\"center\">\n                  <RepoCard userData={userData} />\n                </Row>\n              </Content>\n            </Layout>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}